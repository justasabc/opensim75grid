# a quick guide to install and configure opensim for grid mode 
# ref
#-----------------------------------------------------------------------
# http://opensimulator.org/wiki/Build_Instructions
# http://opensimulator.org/wiki/Download
# http://opensimulator.org/wiki/Configuration
# http://opensimulator.org/wiki/Database_Settings
# http://opensimulator.org/wiki/Monodevelop
# http://opensimulator.org/wiki/ROBUST
# http://opensimulator.org/wiki/Performance
# http://opensimulator.org/wiki/Monitoring
# http://opensimulator.org/wiki/Startup_script_linux
#-----------------------------------------------------------------------
# build tools
# make: c/c++ c#
# nant: .NET
# msbuild(VS)/xbuild(mono): c# .NET

# install mono (>=Mono 2.4.3)
#Ubuntu 10.04 and later
#In this version, one only needs to install mono-complete - this will pull down all the other required packages as dependencies. Thus, to build:
sudo apt-get install mono-complete
mono --version
#Mono JIT compiler version 2.10.8.1 (Debian 2.10.8.1-1ubuntu2.2)

# mono develop IDE (like VS2010)
apt-get install monodevelop
monodevelop --help
#MonoDevelop 2.8.6.3

# Download opensim
# http://opensimulator.org/dist/
wget http://opensimulator.org/dist/opensim-0.7.5-source.tar.gz
tar xvf opensim-0.7.5-source.tar.gz
mv opensim-0.7.5-source opensim75
cd opensim75
# default build vs2008 sln
./runprebuild.sh
# ./runprebuild.sh vs2010
xbuild
# or
apt-get install nant
nant

# start opensim.exe
mono bin/OpenSim.exe

#Step 1: Set up a ROBUST services instance
# Running OpenSimulator in grid mode is considerably more complicated than running a standalone instance. Instead of running everything in the same process, backend data services (asset, inventory, etc.) run in one or more separate processes, often on a different machine. This allows multiple OpenSim.exe simulator instances to use the same asset and inventory data.

# The example file is configured to run all the services in a single ROBUST instance. 
cp Robust.ini.example Robust.ini
# Configure the Database Settings in Robust.ini to use your MySQL database. Only MySQL is supported for running grid services.

apt-get install mysql-server
# root,rootpass
mysql -u root -p
# enter password: rootpass
mysql> create database opensim;
#Query OK, 1 row affected (0.00 sec)

mysql> use opensim;
#Database changed
mysql> create user 'opensimuser'@'localhost' identified by 'opensimpass';
#Query OK, 0 rows affected (0.04 sec)

mysql> grant all on opensim.* to 'opensimuser'@'localhost';
#Query OK, 0 rows affected (0.02 sec)

# configure opensimulator
vim bin/Robust.ini
[DatabaseService]
    ; MySql
    StorageProvider = "OpenSim.Data.MySQL.dll"
    ConnectionString = "Data Source=localhost;Database=opensim;User ID=opensimuser;Password=opensimpass;Old Guids=true;"
# Note that "Data Source=localhost;" actually specifies a TCP socket. If your MySQL server is set up to refuse remote connections (i.e. with skip-networking enabled) you'll need to replace "localhost" with the path to MySQL's UNIX socket.
    ConnectionString = "Data Source=/var/run/mysqld/mysqld.sock;Database=opensim;User ID=opensimuser;Password=opensimpass;Old Guids=true;"

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
vim bin/config-include/GridCommon.ini
[DatabaseService]
    ; MySql
    StorageProvider = "OpenSim.Data.MySQL.dll"
    ConnectionString = "Data Source=localhost;Database=opensim;User ID=opensimuser;Password=opensimpass;Old Guids=true;"
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#You can find the path to the socket that your MySQL server is using with mysqladmin.  
mysqladmin -u root -p version
#server version		5.5.22-0ubuntu1
#Protocol version	10
#Connection		Localhost via UNIX socket
#UNIX socket		/var/run/mysqld/mysqld.sock
#Uptime:			8 hours 41 min 3 sec

mono Robuse.exe
# Error
# [FREESWITCH]: No ServerAddress given, cannot start service.
# http://opensimulator.org/wiki/Freeswitch_Module

#Add for Robust.ini
vim Robust.ini
[ServiceList]
; Freeswitch port 8004
VoiceConnector = "8004/OpenSim.Server.Handlers.dll:FreeswitchServerConnector"
[FreeswitchService]
   LocalServiceModule = OpenSim.Services.FreeswitchService.dll:FreeswitchService
   ; here use freeswitch server
   ServerAddress = http://192.168.1.200

#Add for OpenSim.ini
vim OpenSim.ini
[FreeSwitchVoice]
   Enabled = false
   LocalServiceModule = OpenSim.Services.Connectors.dll:RemoteFreeswitchConnector
   ; here use grid service server
   FreeswitchServiceURL = http://192.168.1.200:8004/fsapi

#Every region must belong to an estate, and every estate must have an owner which is a valid user account in OpenSim's user account service. Create a user on the ROBUST command console with the following command.
>create user
# Test User 1234
#This will ask you for the user's name, password and an optional e-mail. Remember this name since you will need it when you start up the simulator for the first time. 


# Step 2: Configure an OpenSim.exe to use the ROBUST services
vim OpenSim.ini
[Architecture]
    Include-Architecture = "config-include/Grid.ini"
vim bin/config-include/GridCommon.ini
#   :1,$s/mygridserver.com:8003/192.168.1.200:8003/

#  Run OpenSim.exe. If you're running OpenSim.exe for the first time you will get the same questions about setting up the region that occur on a first-run in standalone mode.
mono OpenSim.exe

# If everything is set up correctly, when starting up OpenSim.exe you shouldn't see any errors. You should also see the ROBUST console display log lines saying that the region has registered with the grid service. For example, 

#04:19:13 - [GRID SERVICE]: Region huyu00 (809f84cb-fb7c-4e55-a372-ebca07f81348) registered successfully at 1000-1000
#04:19:15 - [MAP ADD SERVER CONNECTOR]: Received map data for region at 1000-1000

# Login with a client. Your client startup line will look something like 
-loginuri http://192.168.1.200:8002

#The loginuri needs to be the address to the login service. In standalone mode, this was the same address as the region simulator and the port was 9000 by default. However, in grid mode it will be the address to login service hosted on the ROBUST instance. In this case, the address will be 192.168.1.200. The port number of 8002 is the traditional one for the grid login service and is the default in Robust.ini.example.

# If the login is successful, you will see log lines on the ROBUST console (for the login itself) and then log lines on the region simulator console (as the login process tells the simulator to expect the avatar, tells the viewer the address of the region simulator and then when the viewer starts talking to the simulator directly). 

# robust
# 04:34:42 - [LLOGIN SERVICE]: Login request for Test User at last using viewer  0.6.3 (LL 1.23.5), channel Unknown, IP 192.168.1.184, Mac 79df7c5696d0212b950feb1eb1edd733, Id0 26fc49456c177f7f54b10c30934ef668
# opensim

opensim>shutdown
# robust
# 04:37:58 - [GRID SERVICE]: Deregistering region huyu00 (809f84cb-fb7c-4e55-a372-ebca07f81348) at 1000-1000

# Running multiple ROBUST service instances
# *************************************************************************
# 1) Split AssetService from ROBUST instance
# *************************************************************************
# If you are operating a grid, then you can run different services (e.g. asset, inventory) in different ROBUST instances, in order to spread the load. To do this, you will need to edit the ServiceConnectors parameter in the [Startup] section of Robust.ini
vim Robust.ini
;AssetServiceConnector = "8003/OpenSim.Server.Handlers.dll:AssetServiceConnector"

# grid service:8003  login service:8002 freeswitch:8004
# assets servce:8003--->8011
vim Robust.Assets.ini
# ...
vim config-include/GridCommon.ini
#   ;AssetServerURI = "http://192.168.1.200:8003"
#    AssetServerURI = "http://192.168.1.200:8011"
[AssetService]
    DefaultAssetLoader = "OpenSim.Framework.AssetLoader.Filesystem.dll"
    AssetLoaderArgs = "assets/AssetSets.xml"
    AssetServerURI = "http://192.168.1.200:8011"

# Once you've created the two ROBUST configuration files (Robust.ini containing all services apart from asset and Robust.Assets.ini containing only the asset service), then you could start the first Robust.exe as usual. 
# use default Robust.ini and Robust.log
mono Robust.exe
# use Robust.Assets.ini and Robust.Assets.log
mono Robust.exe -inifile=Robust.Assets.ini -logfile=Robust.Assets.log
# in fact, this will still log to Robust.log ???
mono OpenSim.exe

# shutdown opensim
# shutdown Robust Assets
# shutdown Robust 

# Performance
# Possible solutions
# 1) Split up services. By default, ROBUST runs every service in one process. However, because services are separate from each other, you could run some services (e.g. inventory in one ROBUST instance and other services (e.g. asset) in a different instance, even if they both point to the same database. Because the embedded C# webserver is slow and possibly not very concurrent, this can achieve significant performance improvements even if all ROBUST instances are running on the same machine.
# 2) Instantiate extra ROBUST copies of problem services (e.g. inventory). Because services are stateless (akin to a webservice), you can load balance requests between multiple instances using a reverse proxy such as nginx. Again, because the embedded webserver is probably inefficient, you can achieve performance improvements by running multiple copies of services on the same machine.
# 3) Use an external service based on a more efficient HTTP server, e.g. SRAS (asset service only) or SimianGrid. Please be aware that SimianGrid uses a different set of simulator <-> service protocols than used by ROBUST. The necessary SimianGrid adaptors are part of the core OpenSimulator distribution.

# *************************************************************************
# 2) Split LoginService from ROBUST instance
# *************************************************************************

